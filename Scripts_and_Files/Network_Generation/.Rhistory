times = (circos_links %>% filter(ligand_type == "General") %>%
distinct(ligand) %>%
nrow() -1)
times
times = (circos_links %>% filter(ligand_type == "Endothelial-specific") %>%
distinct(ligand) %>%
nrow() -1)
times
times = (circos_links %>% filter(target_type == "p_emt") %>%
distinct(target) %>%
nrow() -1)
circos_links
table(circos_links$ligand_type)
rep(width_same_cell_same_target_type,
times = (circos_links %>% filter(target_type == "p_emt") %>%
distinct(target) %>%
nrow() -1))
rep(width_same_cell_same_ligand_type,
times = (circos_links %>% filter(ligand_type == "Endothelial-specific") %>%
distinct(ligand) %>%
nrow() -1)
)
rep(width_same_cell_same_ligand_type,
times = (circos_links %>% filter(ligand_type == "Endothelial-specific") %>%
distinct(ligand) %>%
nrow() -1))
cutoff_include_all_ligands <-active_ligand_target_links_df$weight %>%
quantile(0.50)
active_ligand_target_links_df_circos <- active_ligand_target_links_df %>%
filter(weight > cutoff_include_all_ligands)
ligands_to_remove <- setdiff(active_ligand_target_links_df$ligand %>%
unique(),
active_ligand_target_links_df_circos$ligand %>%
unique())
targets_to_remove <- setdiff(active_ligand_target_links_df$target %>%
unique(),
active_ligand_target_links_df_circos$target %>%
unique())
circos_links <- active_ligand_target_links_df %>%
filter(!target %in% targets_to_remove &!ligand %in% ligands_to_remove)
grid_col_ligand <- c("General" = "lawngreen", "CAF-specific" = "royalblue",
"Endothelial-specific" = "gold")
grid_col_target =c("p_emt" = "tomato")
grid_col_tbl_ligand <- tibble(ligand_type = grid_col_ligand %>%
names(),
color_ligand_type = grid_col_ligand)
grid_col_tbl_target = tibble(target_type = grid_col_target %>%
names(),
color_target_type = grid_col_target)
## extra space: make a difference between a gene as ligand and a gene as target!
circos_links <- circos_links %>%
mutate(ligand = paste(ligand," "))
circos_links <- circos_links %>%
inner_join(grid_col_tbl_ligand) %>%
inner_join(grid_col_tbl_target)
links_circle <- circos_links %>%
select(ligand,target, weight)
ligand_color <- circos_links %>%
distinct(ligand,color_ligand_type)
grid_ligand_color <- ligand_color$color_ligand_type %>%
set_names(ligand_color$ligand)
target_color <- circos_links %>%
distinct(target,color_target_type)
grid_target_color <- target_color$color_target_type %>%
set_names(target_color$target)
grid_col <- c(grid_ligand_color,grid_target_color)
## give the option that links in the circos plot will be transparant ~
## ligand-target potential score
transparency <- circos_links %>%
mutate(weight =(weight-min(weight))/(max(weight)-min(weight))) %>%
mutate(transparency = 1-weight) %>%
.$transparency
target_order <- circos_links$target %>% unique()
ligand_order <-
c(CAF_specific_ligands,general_ligands,endothelial_specific_ligands) %>%
c(paste(.," ")) %>%
intersect(circos_links$ligand)
order <- c(ligand_order,target_order)
width_same_cell_same_ligand_type <-0.5
width_different_cell <- 6
width_ligand_target <- 15
width_same_cell_same_target_type <- 0.5
# width_ligand_target,
gaps = c(rep(width_same_cell_same_ligand_type,
times = (circos_links %>% filter(ligand_type == "CAF-specific") %>%
distinct(ligand) %>%
nrow() -1)),
width_different_cell,
rep(width_same_cell_same_ligand_type,
times = (circos_links %>% filter(ligand_type == "General") %>%
distinct(ligand) %>%
nrow() -1)),
width_different_cell,
rep(width_same_cell_same_ligand_type,
times = (circos_links %>% filter(ligand_type == "Endothelial-specific") %>%
distinct(ligand) %>%
nrow() -1)),
width_ligand_target,
rep(width_same_cell_same_target_type,
times = (circos_links %>% filter(target_type == "p_emt") %>%
distinct(target) %>%
nrow() -1)),
width_ligand_target
)
circos_links
circos_links$ligand_type == "Endothelial-specific"
endothelial_specific_ligands
best_upstream_ligands %>%
intersect(expressed_ligands_endothelial)
best_upstream_ligands %>%
intersect(expressed_ligands_CAFs)
ligand_expression_tbl
dim(ligand_expression_tbl)
knitr::opts_chunk$set(echo = TRUE, collapse = TRUE, warning = FALSE,
message = FALSE)
library(nichenetr)
library(tidyverse)
library(circlize)
hnscc_expression <-
readRDS(url("https://zenodo.org/record/3260758/files/hnscc_expression.rds"))
expression <- hnscc_expression$expression
## contains meta-information about the cells
sample_info <- hnscc_expression$sample_info
tumors_remove <- c("HN10","HN","HN12", "HN13", "HN24", "HN7", "HN8","HN23")
CAF_ids <- sample_info %>%
filter(`Lymph node` == 0 & !(tumor %in% tumors_remove) & `non-cancer cell type` == "CAF") %>%
pull(cell)
endothelial_ids <- sample_info %>%
filter(`Lymph node` == 0 & !(tumor %in% tumors_remove) & `non-cancer cell type` == "Endothelial") %>%
pull(cell)
malignant_ids <- sample_info %>%
filter(`Lymph node` == 0 & !(tumor %in% tumors_remove) & `classified  as cancer cell` == 1) %>%
pull(cell)
expressed_genes_CAFs <- expression[CAF_ids,] %>%
apply(2,function(x){10*(2**x - 1)}) %>%
apply(2,function(x){log2(mean(x) + 1)}) %>%
.[. >= 4] %>% names()
expressed_genes_endothelial <- expression[endothelial_ids,] %>%
apply(2,function(x){10*(2**x - 1)}) %>%
apply(2,function(x){log2(mean(x) + 1)}) %>%
.[. >= 4] %>%
names()
expressed_genes_malignant <- expression[malignant_ids,] %>%
apply(2,function(x){10*(2**x - 1)}) %>%
apply(2,function(x){log2(mean(x) + 1)}) %>% .[. >= 4] %>%
names()
ligand_target_matrix <- readRDS("Results/ligand_target_matrixWithweights.rds")
## target genes in rows, ligands in columns
ligand_target_matrix[1:5,1:5]
pemt_geneset <-
readr::read_tsv(url("https://zenodo.org/record/3260758/files/pemt_signature.txt"), col_names = "gene") %>%
pull(gene) %>%
.[. %in% rownames(ligand_target_matrix)]
head(pemt_geneset)
background_expressed_genes <- expressed_genes_malignant %>%
.[. %in% rownames(ligand_target_matrix)]
head(background_expressed_genes)
lr_network <- readRDS("OmniNetworks_NNformat/lr_Network_Omnipath.rds")
ligands <- lr_network %>%
pull(from) %>%
unique()
expressed_ligands_CAFs <- intersect(ligands,expressed_genes_CAFs)
expressed_ligands_endothelial <- intersect(ligands,expressed_genes_endothelial)
expressed_ligands <- union(expressed_ligands_CAFs, expressed_genes_endothelial)
expressed_ligands_endothelial
expressed_ligands_CAFs
expressed_ligands <- union(expressed_ligands_CAFs, expressed_genes_endothelial)
expressed_ligands
receptors <- lr_network %>%
pull(to) %>%
unique()
expressed_receptors <- intersect(receptors,expressed_genes_malignant)
potential_ligands <- lr_network %>%
filter(from %in% expressed_ligands & to %in% expressed_receptors) %>%
pull(from) %>%
unique()
head(potential_ligands)
ligand_activities <- predict_ligand_activities(
geneset = pemt_geneset,
background_expressed_genes = background_expressed_genes,
ligand_target_matrix = ligand_target_matrix,
potential_ligands = potential_ligands)
ligand_activities
ligand_activities %>%
arrange(-pearson)
best_upstream_ligands <- ligand_activities %>%
top_n(20, pearson) %>%
arrange(-pearson) %>%
pull(test_ligand)
ligand_activities %>%
arrange(-pearson)
best_upstream_ligands <- ligand_activities %>%
top_n(50, pearson) %>%
arrange(-pearson) %>%
pull(test_ligand)
head(best_upstream_ligands)
## Large overlap between both cell types in terms of expressed ligands.
## Therefore, determine which ligands are more strongly expressed in which cell
## lines
best_upstream_ligands %>%
intersect(expressed_ligands_CAFs)
best_upstream_ligands %>%
intersect(expressed_ligands_endothelial)
ligand_expression_tbl <- tibble(
ligand = best_upstream_ligands,
CAF = expression[CAF_ids,best_upstream_ligands] %>%
apply(2,function(x){10*(2**x - 1)}) %>%
apply(2,function(x){log2(mean(x) + 1)}),
endothelial = expression[endothelial_ids,best_upstream_ligands] %>%
apply(2,function(x){10*(2**x - 1)}) %>%
apply(2,function(x){log2(mean(x) + 1)}))
CAF_specific_ligands <- ligand_expression_tbl %>%
filter(CAF > endothelial + 2) %>%
pull(ligand)
CAF_specific_ligands
endothelial_specific_ligands <- ligand_expression_tbl %>%
filter(endothelial > CAF + 2) %>%
pull(ligand)
endothelial_specific_ligands
general_ligands <-
setdiff(best_upstream_ligands,c(CAF_specific_ligands,endothelial_specific_ligands))
ligand_type_indication_df = tibble(
ligand_type = c(rep("CAF-specific", times = CAF_specific_ligands %>%
length()),
rep("General", times = general_ligands %>%
length()),
rep("Endothelial-specific", times = endothelial_specific_ligands %>%
length())),
ligand = c(CAF_specific_ligands, general_ligands, endothelial_specific_ligands))
ligand_type_indication_df
active_ligand_target_links_df <-
best_upstream_ligands %>%
lapply(get_weighted_ligand_target_links,geneset = pemt_geneset,
ligand_target_matrix = ligand_target_matrix, n = 250) %>%
bind_rows()
# if you want ot make circos plots for multiple gene sets, combine the different
## data frames and differentiate which target belongs to which gene set via the
## target type
active_ligand_target_links_df <- active_ligand_target_links_df %>%
mutate(target_type = "p_emt") %>%
inner_join(ligand_type_indication_df)
cutoff_include_all_ligands <-active_ligand_target_links_df$weight %>%
quantile(0.66)
active_ligand_target_links_df_circos <- active_ligand_target_links_df %>%
filter(weight > cutoff_include_all_ligands)
ligands_to_remove <- setdiff(active_ligand_target_links_df$ligand %>%
unique(),
active_ligand_target_links_df_circos$ligand %>%
unique())
targets_to_remove <- setdiff(active_ligand_target_links_df$target %>%
unique(),
active_ligand_target_links_df_circos$target %>%
unique())
circos_links <- active_ligand_target_links_df %>%
filter(!target %in% targets_to_remove &!ligand %in% ligands_to_remove)
grid_col_ligand <- c("General" = "lawngreen", "CAF-specific" = "royalblue",
"Endothelial-specific" = "gold")
grid_col_target =c("p_emt" = "tomato")
grid_col_tbl_ligand <- tibble(ligand_type = grid_col_ligand %>%
names(),
color_ligand_type = grid_col_ligand)
grid_col_tbl_target = tibble(target_type = grid_col_target %>%
names(),
color_target_type = grid_col_target)
## extra space: make a difference between a gene as ligand and a gene as target!
circos_links <- circos_links %>%
mutate(ligand = paste(ligand," "))
circos_links <- circos_links %>%
inner_join(grid_col_tbl_ligand) %>%
inner_join(grid_col_tbl_target)
links_circle <- circos_links %>%
select(ligand,target, weight)
ligand_color <- circos_links %>%
distinct(ligand,color_ligand_type)
grid_ligand_color <- ligand_color$color_ligand_type %>%
set_names(ligand_color$ligand)
target_color <- circos_links %>%
distinct(target,color_target_type)
grid_target_color <- target_color$color_target_type %>%
set_names(target_color$target)
grid_col <- c(grid_ligand_color,grid_target_color)
## give the option that links in the circos plot will be transparant ~
## ligand-target potential score
transparency <- circos_links %>%
mutate(weight =(weight-min(weight))/(max(weight)-min(weight))) %>%
mutate(transparency = 1-weight) %>%
.$transparency
target_order <- circos_links$target %>% unique()
ligand_order <-
c(CAF_specific_ligands,general_ligands,endothelial_specific_ligands) %>%
c(paste(.," ")) %>%
intersect(circos_links$ligand)
order <- c(ligand_order,target_order)
width_same_cell_same_ligand_type <-0.5
width_different_cell <- 6
width_ligand_target <- 15
width_same_cell_same_target_type <- 0.5
# width_ligand_target,
gaps = c(rep(width_same_cell_same_ligand_type,
times = (circos_links %>% filter(ligand_type == "CAF-specific") %>%
distinct(ligand) %>%
nrow() -1)),
width_different_cell,
rep(width_same_cell_same_ligand_type,
times = (circos_links %>% filter(ligand_type == "General") %>%
distinct(ligand) %>%
nrow() -1)),
width_different_cell,
rep(width_same_cell_same_ligand_type,
times = (circos_links %>% filter(ligand_type == "Endothelial-specific") %>%
distinct(ligand) %>%
nrow() -1)),
width_ligand_target,
rep(width_same_cell_same_target_type,
times = (circos_links %>% filter(target_type == "p_emt") %>%
distinct(target) %>%
nrow() -1)),
width_ligand_target
)
circos.par(gap.degree = gaps)
chordDiagram(links_circle, directional = 1,order=order,link.sort = TRUE,
link.decreasing = FALSE, grid.col = grid_col,transparency = 0,
diffHeight = 0.005, direction.type = c("diffHeight", "arrows"),
link.arr.type = "big.arrow",
link.visible = links_circle$weight >= cutoff_include_all_ligands,
annotationTrack = "grid",
preAllocateTracks = list(track.height = 0.075))
chordDiagram(links_circle, directional = 1,order=order,link.sort = TRUE,
link.decreasing = FALSE, grid.col = grid_col,transparency = 0,
diffHeight = 0.005, direction.type = c("diffHeight", "arrows"),
link.arr.type = "big.arrow",
link.visible = links_circle$weight >= cutoff_include_all_ligands,
annotationTrack = "grid",
preAllocateTracks = list(track.height = 0.075))
## we go back to the first track and customize sector labels
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.55), cex = 1)
}, bg.border = NA) #
links_circle
dim(links_circle)
circos.par(gap.degree = gaps)
chordDiagram(links_circle, directional = 1, order=order, link.sort = TRUE,
link.decreasing = FALSE, grid.col = grid_col,transparency = transparency,
diffHeight = 0.005, direction.type = c("diffHeight", "arrows"),
link.arr.type = "big.arrow",
link.visible = links_circle$weight >= cutoff_include_all_ligands,
annotationTrack = "grid",
preAllocateTracks = list(track.height = 0.075))
## we go back to the first track and customize sector labels
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.55), cex = 1)
}, bg.border = NA) #
omniR <- import_Omnipath_Interactions(filter_databases=c("IntAct","BioGrid","Signor"))
library(OmnipathR)
omniR <- import_Omnipath_Interactions(filter_databases=c("IntAct","BioGrid","Signor"))
get_interaction_databases()
omniR <- import_Omnipath_Interactions(filter_databases=c("IntAct","BioGrid","Signor"))
#
import_TFregulons_Interactions()
#
alberto <- import_TFregulons_Interactions()
table(alberto$tfregulons_level)
full_dorothea <- read_csv("Documents/GitHub/Saezlab/NicheNet_Omnipath/DoRothEA/database.csv")
head(full_dorothea)
table(full_dorothea$score)
table(alberto)
#
alberto <- import_TFregulons_Interactions()
table(alberto$tfregulons_level)
import_TFregulons_Interactions
#
alberto <- import_TFregulons_Interactions()
?import_TFregulons_Interactions
View(import_TFregulons_Interactions)
url_ptms_common <-
'http://omnipathdb.org/ptms/?fields=sources&fields=references'
select_organism = 9606
url_tfregulons_common <-
paste0('http://omnipathdb.org/interactions?datasets=tfregulons&',
'fields=sources,tfregulons_level')
url_tfregulons <- organism_url(url_tfregulons_common, select_organism)
select_organism=9606
url_tfregulons_common <-
paste0('http://omnipathdb.org/interactions?datasets=tfregulons&',
'fields=sources,tfregulons_level')
url_tfregulons <- organism_url(url_tfregulons_common, select_organism)
import_TFregulons_Interactions
import_TFregulons_Interactions()
remove(OmnipathR)
remove.packages(OmnipathR)
remove.packages(OmnipathR)
remove.packages("OmnipathR")
library(OmnipathR)
:import_TFregulons_Interactions
?import_TFregulons_Interactions
rm(list=ls())
################################################################################################################
## 1.- We load the common network generation functions, and we install/load the packages needed.
################################################################################################################
source("Network_Generation_Utils.R")
getwd
getwd()
rm(list=ls())
setwd("Documents/GitHub/RWR-MH/")
rm(list=ls())
################################################################################################################
## 1.- We load the common network generation functions, and we install/load the packages needed.
################################################################################################################
source("Network_Generation_Utils.R")
################################################################################################################
## 1.- We load the common network generation functions, and we install/load the packages needed.
################################################################################################################
source("Network_Generation_Utils.R")
getwd
getwd()
setwd
setwd("Scripts_and_Files/")
################################################################################################################
## 1.- We load the common network generation functions, and we install/load the packages needed.
################################################################################################################
source("Network_Generation_Utils.R")
CRAN.packages <- c("igraph")
setwd("Network_Generation/")
rm(list=ls())
################################################################################################################
## 1.- We load the common network generation functions, and we install/load the packages needed.
################################################################################################################
source("Network_Generation_Utils.R")
CRAN.packages <- c("igraph")
bioconductor.packages <- c("graphite","org.Hs.eg.db")
install.packages.if.necessary(CRAN.packages,bioconductor.packages)
################################################################################################################
## 2.- We recover the different pathways DB.
################################################################################################################
pathwayDatabases()
######## 2.1.-KEGG
# We create Kegg interaction Network using the GetPathwayData funciton.
################################################################################################################
KeggRaw <- GetPathwayData ("kegg","hsapiens")
# Build network.
Kegg <- build.network(KeggRaw)
db.name <- "kegg"; db.specie <-  "hsapiens"
db <- pathways(db.specie, db.name)
OneDb.HGNC <- data.frame()
i <- 1
current.pathway <- (convertIdentifiers(db[[i]],"SYMBOL"))
current.pathway.info <- try(data.frame(src = current.pathway@edges$src,
dest = current.pathway@edges$dest,
direction = current.pathway@edges$direction,
type = current.pathway@edges$type,
name = current.pathway@title),silent=TRUE)
OneDb.HGNC <- rbind(OneDb.HGNC,current.pathway.info)
OneDb.HGNC<-OneDb.HGNC[complete.cases(OneDb.HGNC),] #remove NA rows
#transform the directed edge into undirected edge
OneDb.HGNC[OneDb.HGNC == "directed"] <- "undirected"
head(OneDb.HGNC)
current.pathway <- (convertIdentifiers(db[[i]],"SYMBOL"))
current.pathway
current.pathway.info <- try(data.frame(src = current.pathway@edges$src,
dest = current.pathway@edges$dest,
direction = current.pathway@edges$direction,
type = current.pathway@edges$type,
name = current.pathway@title),silent=TRUE)
current.pathway.info
current.pathway
current.pathway@protEdges
current.pathway@protPropEdges
head(current.pathway@protPropEdges)
current.pathway
current.pathway@id
current.pathway@title
current.pathway@database
current.pathway@species
current.pathway@protEdges
current.pathway@metabolPropEdges
current.pathway@mixedEdges
current.pathway@protPropEdges
################################################################################################################
## 1.- We load the common network generation functions, and we install/load the packages needed.
################################################################################################################
source("Network_Generation_Utils.R")
CRAN.packages <- c("igraph")
bioconductor.packages <- c("graphite","org.Hs.eg.db")
install.packages.if.necessary(CRAN.packages,bioconductor.packages)
# We get the date of execution. Then we will paste it to the name of the network.
date <- Sys.Date()
################################################################################################################
## 2.- We recover the different pathways DB.
################################################################################################################
pathwayDatabases()
######## 2.1.-KEGG
# We create Kegg interaction Network using the GetPathwayData funciton.
################################################################################################################
KeggRaw <- GetPathwayData ("kegg","hsapiens")
# Build network.
Kegg <- build.network(KeggRaw)
######## 2.2.-BIOCARTA
# We create Biocarta Network using the GetPathwayData funciton.
################################################################################################################
BiocartaRaw <- GetPathwayData ("biocarta","hsapiens")
db.name <- "biocarta"; db.specie <- "hsapiens"
db <- pathways(db.specie, db.name)
OneDb.HGNC <- data.frame()
i <- 1
current.pathway <- (convertIdentifiers(db[[i]],"SYMBOL"))
current.pathway
current.pathway@protPropEdges$src
current.pathway@protEdges
current.pathway
current.pathway@protEdges
